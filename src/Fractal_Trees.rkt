#lang racket
; Enter your code here. Read input from STDIN. Print output to STDOUT

(define (N)
    (printf "\n"))
(define (J)
    (printf "1"))
(define (U j)
    (if (zero? j)
        (void)
        (begin
            (printf "_")
            (U (sub1 j)))))
(define (L j)
    (if (zero? j)
        (void)
        (begin
            (U 100)
            (N)
            (L (sub1 j)))))
(define (v n j k)
    (if (zero? j)
        (void)
        (begin
            (U k)
            (U (sub1 (expt 2 (sub1 n))))
            (J)
            (U (- (expt 2 n) (+ k k 1)))
            (J)
            (U (expt 2 (sub1 n)))
            (U k)
            (v n (sub1 j) k))))
(define (V n j k)
    (if (zero? j)
        (void)
        (begin
            (U 18)
            (v n (expt 2 (- 5 n)) k)
            (U 18)
            (N)
            (V n (sub1 j) (add1 k)))))
(define (i n j)
    (if (zero? j)
        (void)
        (begin
            (U (sub1 (expt 2 n)))
            (J)
            (U (expt 2 n))
            (i n (sub1 j)))))
(define (I n j)
    (if (zero? j)
        (void)
        (begin
            (U 18)
            (i n (expt 2 (- 5 n)))
            (U 18)
            (N)
            (I n (sub1 j)))))
(define (Y n)
    (if (zero? n)
        (void)
        (begin
            (V (- 6 n) (expt 2 (- 5 n)) 0)    
            (I (- 6 n) (expt 2 (- 5 n)))
            (Y (sub1 n)))))
((lambda (n)
    (begin
        (L (sub1 (expt 2 (- 6 n))))
        (Y n)))
    (read))